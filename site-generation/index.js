import { mean, deviation } from 'd3-array';
import { format } from 'd3-format';
import pageTemplate from './templates/site.pug';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import './styles.css';

const twoDecimal = format('0.4r');
const getRowsForResultArray = (arr, url, path) => Object.keys(arr[0]).reduce((acc, key) => {
  const accessor = (obj) => obj[key];
  return [
    ...acc, [
      url,
      path,
      key,
      twoDecimal(deviation(arr, accessor) || 0),
      twoDecimal(mean(arr, accessor) || 0),
    ],
  ];
}, []);
const getStandardDeviationData = (data, newURL, comparisonURL) => Object
  .entries(data)
  .reduce((acc, [path, { new: newSite, comparison }]) => [
    ...acc,
    ...getRowsForResultArray(newSite, newURL, path),
    ...getRowsForResultArray(comparison, comparisonURL, path),
  ], []);

(async () => {
  let results;
  let html;
  try {
    // results.json is generated by another process, if it doesn't exist, we handle it with
    // a specific catch
    // eslint-disable-next-line import/no-unresolved
    results = await import('../results.json');
  } catch {
    html = pageTemplate({
      criticalError: true,
    });
  }
  if (results) {
    const { data, newURL, comparisonURL } = results;
    html = pageTemplate({
      standardDeviation: getStandardDeviationData(data, newURL, comparisonURL),
    });
  }
  document.querySelector('body').innerHTML = html;
})();
